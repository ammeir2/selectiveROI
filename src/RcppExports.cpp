// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sliceSamplerRcpp
void sliceSamplerRcpp(NumericMatrix sampMat, NumericVector samp, NumericMatrix chol, NumericVector lth, NumericVector uth);
RcppExport SEXP _selectiveROI_sliceSamplerRcpp(SEXP sampMatSEXP, SEXP sampSEXP, SEXP cholSEXP, SEXP lthSEXP, SEXP uthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sampMat(sampMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samp(sampSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type chol(cholSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lth(lthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uth(uthSEXP);
    sliceSamplerRcpp(sampMat, samp, chol, lth, uth);
    return R_NilValue;
END_RCPP
}
// sampleUnivTruncNorm
double sampleUnivTruncNorm(double mu, double sd, double lower, double upper);
RcppExport SEXP _selectiveROI_sampleUnivTruncNorm(SEXP muSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleUnivTruncNorm(mu, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// sampleTruncNorm
NumericVector sampleTruncNorm(NumericVector sample, NumericVector lower, NumericVector upper, NumericVector mean, NumericMatrix precision, int cycles);
RcppExport SEXP _selectiveROI_sampleTruncNorm(SEXP sampleSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP meanSEXP, SEXP precisionSEXP, SEXP cyclesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< int >::type cycles(cyclesSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleTruncNorm(sample, lower, upper, mean, precision, cycles));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_selectiveROI_sliceSamplerRcpp", (DL_FUNC) &_selectiveROI_sliceSamplerRcpp, 5},
    {"_selectiveROI_sampleUnivTruncNorm", (DL_FUNC) &_selectiveROI_sampleUnivTruncNorm, 4},
    {"_selectiveROI_sampleTruncNorm", (DL_FUNC) &_selectiveROI_sampleTruncNorm, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_selectiveROI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
